name: Release
'on':
  push:
    tags:
      - v*
concurrency:
  group: 'build-${{ github.ref }}'
  cancel-in-progress: true
jobs:
  build:
    strategy:
      matrix:
        java:
          - 17
    name: Upload Release Asset
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '${{ matrix.java }}'
      - name: Build project
        run: |
          ./gradlew cli:fatBinary
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ github.ref }}'
          release_name: 'Release ${{ github.ref }}'
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./cli/projectGenerator
          asset_name: projectGenerator
          asset_content_type: application/octet-stream

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${GITHUB_REF_NAME#refs/tags/}" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          cd backend
          docker buildx build \
            --platform linux/amd64 \
            -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/${{ secrets.IMAGE_NAME }}:latest \
            --push .

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/${{ secrets.IMAGE_NAME }}:${{ github.ref_name }} \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --set-env-vars NODE_ENV=production

      - name: Get Service URL
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} --region=${{ secrets.GCP_REGION }} --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Comment on Release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Backend deployed successfully for release ${{ github.ref_name }}!

              **Service URL:** ${{ steps.service-url.outputs.service_url }}
              **Health check:** ${{ steps.service-url.outputs.service_url }}/health`
            })
